{"version":3,"sources":["script.js"],"names":["App","init","this","boardDimension","board","Array","fill","undefined","MIN","MAX","moveAndGetUtil","bind","turnInformer","restartPauseDuration","pauseMove","boardToOut","makeMove","drawCell","arguments","length","utility","computerMove","then","nextMove","_this","terminal","handleTerminalConditions","chooseMove","condition","_this2","log","debug","showMessage","msg","boardElm","window","stopListenElms","setTimeout","resetBoard","changeActiveStyle","toOut","i","elm","join","console","map","player","info","randomRange","arr","Math","random","start","floor","Engine","actions","getBestDebutMoves","logDepth","logLine","minimax","move","depth","_this3","_utility","_utility2","_slicedToArray","newBoard","min","playerInColumn","col","y","playerInRow","playerInDiag","x","row","z","movesDone","ndx","nextMoveArr","res","filter","availableMoves","acc","movesLeft","push","stringify","_this4","Promise","resolve","JSON","maxUtility","suggestedMove","max","apply","drawBoard","symbolChoiceHandler","addElm","frmSymbolChoice","boardCells","document","msgElm","initializeBoard","data","forEach","handleClick","style","clearMessage","boardHTML","querySelector","removeEventListener","addEventListener","querySelectorAll","host","innerHTML","childNodes","e","_this5","FormData","child","cell","value","cellElm","documentElement","setProperty","currentTarget","_this6","classList","_this7","_this8","type","handleBoardClick","id","split","Boolean","remove","add","toggle","setLevel","Object","assign","UI","listen"],"mappings":"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","file":"script.js","sourcesContent":["/* eslint no-var: 0 */\n/* eslint vars-on-top: 0 */\n/* eslint prefer-const: 0 */\n/* eslint arrow-parens: 0 */\n/* eslint consistent-return: 0 */\n\n// +(engine) add terminal conditions handler;\n// +(engine) add start game routine - if the user have chosen 0, then comp should start;\n// +(engine) add start game shortcuts - no need to run after first user move (to long);\n// +(engine) start engine in async to UI;\n// +(engine) check whether anti-diag analysis actially works;\n// +(engine) fix halting when player starts from the center;\n// +(UI) add flag - which turn is now;\n// +(UI) add symbol choice dialog;\n// +(UI) add game ending message;\n// +(UI) stop the game after terminal condition is reached;\n// +(UI - minor) remove event handler on already clicked cell;\n// +(UI) when the game is finished, wait and start it again;\n\n// minimax(board, player  ) recursive;\n// ev(board, player) - evaluation function - value of a position for the player;\n// winning(board) - returns boolean and player dependent on the position;\n// mapToInt(board, player) - convert player position to 0&1 representation;\n// getMoveNumber(board) - return number of the moves done;\n\n/*\nThe board is an array with available states: '0', 'X' and undefined;\nThe game logic is:\n  - render the board;\n  - render the turn choice;\n  - chooseMove() on the next turn move;\n  - makeMove() to get the new board;\n  - render the changes on the board;\n  - analyze whether we have terminal conditions:\n    - YES - stop the game; show the message;\n    - NO - keep playing;\n*/\n\nvar App = {\n  init() {\n    this.boardDimension = 3;\n    this.board = new Array(this.boardDimension * this.boardDimension).fill(\n      undefined,\n    );\n    this.MAX = '0'; // computer player;\n    this.MIN = 'X'; // interactive player;\n    this.restartPauseDuration = 2; // in seconds;\n    this.pauseMove = 1; // in seconds;\n    this.moveAndGetUtil = this.moveAndGetUtil.bind(this);\n    this.turnInformer = this.turnInformer.bind(this);\n    this.randomRange = this.randomRange.bind(this);\n    this.boardToOut = this.boardToOut.bind(this);\n  },\n\n  moveAndGetUtil(...args) {\n    this.board = this.makeMove(...args);\n    this.drawCell(args[1], args[2]);\n    return this.utility(...args);\n  },\n\n  computerMove() {\n    // this.turnInformer(this.board);\n    this.chooseMove(this.board)\n      .then(nextMove => this.moveAndGetUtil(this.board, nextMove, this.MAX))\n      .then(terminal => {\n        if (terminal[0]) this.handleTerminalConditions(terminal[1]);\n        else this.turnInformer(this.board);\n      });\n  },\n\n  handleTerminalConditions(condition) {\n    log.debug(`handleTerminalConditions got condition: ${condition}`);\n    var msg = '';\n    if (condition === -1) this.showMessage('You win!');\n    else if (condition === 1) this.showMessage('Computer wins!');\n    else if (condition === 0) this.showMessage('Draw!');\n    this.stopListenElms(this.boardElm);\n    window.setTimeout(() => {\n      this.clearMessage();\n      this.resetBoard();\n    }, this.restartPauseDuration * 1000);\n  },\n\n  resetBoard() {\n    log.debug('resetBoard started');\n    this.board = new Array(this.boardDimension * this.boardDimension).fill(\n      undefined,\n    );\n    this.drawBoard(this.board);\n    this.changeActiveStyle(this.MIN);\n    if (this.MAX === 'X') this.computerMove();\n  },\n\n  boardToOut(board) {\n    for (var i = 0; i < this.boardDimension; i++) {\n      var toOut = board\n        .slice(i * this.boardDimension, (i + 1) * this.boardDimension)\n        .map(elm => (elm ? elm : '_'))\n        .join(' ');\n      console.log(toOut);\n    }\n  },\n\n  turnInformer(board) {\n    var whoseTurn = this.player(board);\n    if (whoseTurn === this.MAX) {\n      log.info('Computer turn');\n      this.changeActiveStyle(this.MAX);\n    } else {\n      log.info('Player turn');\n      this.changeActiveStyle(this.MIN);\n    }\n  },\n\n  randomRange(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  },\n};\n\nvar Engine = {\n  start() {\n    this.minimax = this.minimax.bind(this);\n    this.utility = this.utility.bind(this);\n    this.player = this.player.bind(this);\n    this.actions = this.actions.bind(this);\n    this.makeMove = this.makeMove.bind(this);\n    this.getBestDebutMoves = this.getBestDebutMoves.bind(this);\n    this.chooseMove = this.chooseMove.bind(this);\n    this.logDepth = this.logDepth.bind(this);\n    this.debug = 0;\n    this.logLine = 1;\n  },\n\n  minimax(board, move, player, depth) {\n    depth = depth || 0;\n    var [terminal, utility] = this.utility(board, move, player);\n    if (terminal) {\n      this.logDepth(depth, 'utility', utility);\n      return utility;\n    }\n    var newBoard = this.makeMove(board, move, player);\n    if (this.player(newBoard) === this.MAX) {\n      this.logDepth(++depth, 'turn', this.MAX);\n      return Math.max.apply(\n        null,\n        this.actions(newBoard).map(nextMove => {\n          this.logDepth(depth, 'move', nextMove);\n          return this.minimax(newBoard, nextMove, this.MAX, depth);\n        }),\n      );\n    }\n    if (this.player(newBoard) === this.MIN) {\n      this.logDepth(++depth, 'turn', this.MIN);\n      return Math.min.apply(\n        null,\n        this.actions(newBoard).map(nextMove => {\n          this.logDepth(depth, 'move', nextMove);\n          return this.minimax(newBoard, nextMove, this.MIN, depth);\n        }),\n      );\n    }\n  },\n\n  utility(board, move, player) {\n    // terminal conditions are draw or win;\n    // if diag or anti-diag or any row or col filled with same symbols - win;\n    // if no more turns left - draw;\n\n    var newBoard = this.makeMove(board, move, player);\n    // log.debug(this.boardToOut(newBoard));\n\n    var row = Math.ceil((move + 1) / this.boardDimension) - 1;\n    var col = move % this.boardDimension;\n    // analyze column where move takes place;\n    var playerInColumn = 0;\n    for (let y = 0; y < this.boardDimension; y++) {\n      if (newBoard[y * this.boardDimension + col] === player) {\n        playerInColumn += 1;\n      }\n    }\n    if (playerInColumn === this.boardDimension && player === this.MAX)\n      return [true, 1];\n    else if (playerInColumn === this.boardDimension && player === this.MIN)\n      return [true, -1];\n    // analyze row where move takes place;\n    var playerInRow = 0;\n    for (let x = 0; x < this.boardDimension; x++) {\n      if (newBoard[row * this.boardDimension + x] === player) {\n        playerInRow += 1;\n      }\n    }\n    if (playerInRow === this.boardDimension && player === this.MAX)\n      return [true, 1];\n    else if (playerInRow === this.boardDimension && player === this.MIN)\n      return [true, -1];\n\n    if (row === col) {\n      // analyze diag where move takes place;\n      var playerInDiag = 0;\n      for (let z = 0; z < this.boardDimension; z++) {\n        if (newBoard[z + this.boardDimension * z] === player) {\n          playerInDiag += 1;\n        }\n      }\n      if (playerInDiag === this.boardDimension && player === this.MAX)\n        return [true, 1];\n      else if (playerInDiag === this.boardDimension && player === this.MIN)\n        return [true, -1];\n    }\n\n    if (row === this.boardDimension - col - 1) {\n      var playerInDiag = 0;\n      // analyze anti-diag where move takes place;\n      for (let z = 0; z < this.boardDimension; z++) {\n        if (\n          newBoard[(this.boardDimension - z) * (this.boardDimension - 1)] ===\n          player\n        ) {\n          playerInDiag += 1;\n        }\n      }\n      if (playerInDiag === this.boardDimension && player === this.MAX)\n        return [true, 1];\n      else if (playerInDiag === this.boardDimension && player === this.MIN)\n        return [true, -1];\n    }\n\n    if (!this.actions(newBoard)) return [true, 0];\n\n    return [undefined, undefined];\n  },\n\n  player(board) {\n    var movesDone = board.reduce((res, elm) => (elm ? res + 1 : res), 0);\n    return movesDone % 2 === 0 ? 'X' : '0';\n  },\n\n  actions(board) {\n    var movesLeft = board.reduce((acc, elm, ndx) => {\n      if (!elm) acc.push(ndx);\n      return acc;\n    }, []);\n    return movesLeft.length > 0 ? movesLeft : undefined;\n  },\n\n  makeMove(board, move, player) {\n    var newBoard = [...board];\n    newBoard[move] = player;\n    return newBoard;\n  },\n\n  getBestDebutMoves(availableMoves) {\n    var nextMoveArr = [];\n    nextMoveArr.push(0);\n    nextMoveArr.push(this.boardDimension - 1);\n    nextMoveArr.push(this.board.length - this.boardDimension);\n    nextMoveArr.push(this.board.length - 1);\n    if (this.boardDimension % 2 !== 0) {\n      nextMoveArr.push((this.board.length - 1) / 2);\n    }\n    log.debug(`All available debut moves: ${JSON.stringify(nextMoveArr)}`);\n    nextMoveArr = nextMoveArr.filter(elm => availableMoves.includes(elm));\n    return this.randomRange(nextMoveArr);\n  },\n\n  chooseMove(board) {\n    return new Promise(resolve => {\n      var nextMove;\n      var availableMoves = this.actions(this.board);\n      // if computer starts, then put 'X' either to center or to any corner;\n      if (availableMoves.length === this.board.length) {\n        nextMove = this.getBestDebutMoves(availableMoves);\n      } else if (availableMoves.length === this.board.length - 1) {\n        // if a player starts, then put 'X' to center if available or to any corner;\n        log.debug(`We are on the second move routine, choosing for next move`);\n\n        nextMove = this.getBestDebutMoves(availableMoves);\n        log.debug(`Preliminary chosen move: ${nextMove}`);\n\n        if (this.boardDimension % 2 !== 0) {\n          var suggestedMove = (this.board.length - 1) / 2;\n          log.debug(`Available moves are: ${JSON.stringify(availableMoves)}`);\n          if (availableMoves.includes(suggestedMove)) nextMove = suggestedMove;\n        }\n      } else {\n        // if game is in the middle, then enumerate available moves and\n        // call minimax for each, to find the best;\n        availableMoves = this.actions(board).map(move => {\n          var utility = this.minimax(board, move, this.MAX);\n          return [move, utility];\n        });\n        log.debug(`Available moves: ${JSON.stringify(availableMoves)}`);\n        // if more than one move available at max utility, choose any of them.\n        var maxUtility = Math.max.apply(\n          null,\n          availableMoves.map(elm => elm[1]),\n        );\n        log.debug(`Max utility: ${maxUtility}`);\n        // if more than one move available at max utility, choose any of them.\n        availableMoves = availableMoves.filter(elm => elm[1] === maxUtility);\n        log.debug(\n          `Available moves after max filter: ${JSON.stringify(availableMoves)}`,\n        );\n        nextMove = this.randomRange(availableMoves)[0];\n      }\n      resolve(nextMove);\n    });\n  },\n\n  logDepth(depth, ...args) {\n    if (this.debug === 9) {\n      console.log(\n        `${this.logLine++}. ${depth}${new Array(depth * 2).fill('-').join('')}${\n          args[0]\n        }: ${args[1]}`,\n      );\n    }\n  },\n};\n\nvar UI = {\n  listen() {\n    log.debug(`UI listen called`);\n    this.drawBoard = this.drawBoard.bind(this);\n    this.drawCell = this.drawCell.bind(this);\n    this.symbolChoiceHandler = this.symbolChoiceHandler.bind(this);\n    this.addElm = this.addElm.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.changeActiveStyle = this.changeActiveStyle.bind(this);\n    this.showMessage = this.showMessage.bind(this);\n    this.clearMessage = this.clearMessage.bind(this);\n    this.frmSymbolChoice = document.querySelector('#frmSymbolChoice');\n    this.frmSymbolChoice.removeEventListener(\n      'change',\n      this.symbolChoiceHandler,\n    );\n    this.frmSymbolChoice.addEventListener('change', this.symbolChoiceHandler);\n    this.boardElm = document.querySelector('#boardElm');\n    this.boardCells = document.querySelectorAll('.board__cell');\n    this.msgElm = document.querySelector('#msgElm');\n    this.initializeBoard();\n    this.drawBoard(this.board);\n  },\n\n  symbolChoiceHandler(e) {\n    log.debug(e);\n    // e.preventDefault();\n    var data = new FormData(this.frmSymbolChoice);\n    data.forEach(elm => {\n      log.debug(`User's choise: ${elm}`);\n      this.MIN = elm;\n      this.MAX = this.MIN === 'X' ? '0' : 'X';\n    });\n    this.resetBoard();\n  },\n\n  initializeBoard() {\n    document.documentElement.style.setProperty(\n      '--boardDimension',\n      this.boardDimension,\n    );\n  },\n\n  drawBoard(board) {\n    var boardHTML = board\n      .map((elm, ndx) => {\n        return `<div class=\"board__cell\" id=\"boardCellElm_${ndx}\">\n                  <span>${elm || ''}</span>\n                </div>`;\n      })\n      .join('');\n    this.addElm(this.boardElm, boardHTML);\n  },\n\n  addElm(host, elm) {\n    host.innerHTML = elm;\n    host.childNodes.forEach(child =>\n      child.addEventListener('click', this.handleClick),\n    );\n  },\n\n  stopListenElms(host) {\n    host.childNodes.forEach(child =>\n      child.removeEventListener('click', this.handleClick),\n    );\n  },\n\n  drawCell(cell, value) {\n    var cellElm = document.querySelector(`#boardCellElm_${cell}`);\n    cellElm.innerHTML = value;\n  },\n\n  handleClick(e) {\n    e.currentTarget.removeEventListener(e.type, this.handleBoardClick);\n    log.debug(`Player clicked ${e.currentTarget.id}`);\n    var move = e.currentTarget.id.split('_')[1];\n\n    if (!this.board[move]) {\n      var terminal = this.moveAndGetUtil(this.board, move, this.MIN);\n      log.debug(\n        `Condition after move to ${move} is ${\n          Boolean(terminal[0]) ? 'terminal' : 'non-terminal'\n        }`,\n      );\n\n      if (terminal[0]) this.handleTerminalConditions(terminal[1]);\n      else {\n        this.turnInformer(this.board);\n        setTimeout(() => {\n          this.computerMove();\n        }, this.pauseMove * 1000);\n      }\n    }\n  },\n\n  changeActiveStyle(player) {\n    document\n      .querySelector(`#label${player === 'X' ? '0' : 'X'}`)\n      .classList.remove('menu__element--active');\n    document\n      .querySelector(`#label${player}`)\n      .classList.add('menu__element--active');\n  },\n\n  showMessage(msg) {\n    log.info(msg);\n    this.msgElm.innerHTML = msg;\n    this.msgElm.classList.toggle('--hidden');\n  },\n\n  clearMessage() {\n    this.msgElm.innerHTML = '';\n    this.msgElm.classList.toggle('--hidden');\n  },\n};\n\nlog.setLevel('info');\nObject.assign(App, UI, Engine);\nApp.init();\nApp.listen();\nApp.start();\n\n/* 3x3 board\n0 1 2\n3 4 5\n6 7 8\n*/\nApp.drawBoard(App.board);\n\n/* 4x4 board with a row and diag filled\n0 1 2 3\n4 5 6 7\n8 9 0 1\n2 3 4 5\n*/\n"],"sourceRoot":"/source/"}